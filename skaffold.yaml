apiVersion: skaffold/v4beta13
kind: Config
metadata:
  name: tripmonkey

profiles:

  - name: development
    activation:
      - command: dev

    deploy:
      kubectl:
        hooks:
          before:
            - host:
                command: [ "kubectl","apply","-f","k8s/misc/kafka/" ]
            - host:
                command: [ "kubectl","apply","-f","k8s/misc/infra-ingress.yaml" ]
            - host:
                command: ["kubectl","apply","-f","build/mongodb-kubernetes-operator/config/crd/bases/mongodbcommunity.mongodb.com_mongodbcommunity.yaml"]
            - host:
                command: ["kubectl","apply","-f","build/mongodb-kubernetes-operator/deploy/clusterwide/"]
            - host:
                command: ["kubectl","apply","-f","build/mongodb-kubernetes-operator/config/rbac/"]
            - host:
                command: ["kubectl","apply","-f","build/mongodb-kubernetes-operator/config/manager/manager.yaml"]

    manifests:

      rawYaml:
        # config and secrets - NOTE for posterity: skaffold doesnt support multiple resources in a single manifest
        - k8s/environments/0.development/deploy/configurations/*
        - k8s/environments/0.development/deploy/rbac/kafka/*
        - k8s/environments/0.development/deploy/rbac/secrets/*

        # infra dependencies
        - k8s/environments/0.development/deploy/infrastructure/infra-kafka.yaml
        - k8s/environments/0.development/deploy/telemetry/*
        - k8s/environments/0.development/deploy/infrastructure/*

        # app
        - k8s/environments/0.development/deploy/infrastructure/tripmonkey-ingress-conf.yaml
        - k8s/environments/0.development/deploy/deployments/jvm/*
        - k8s/environments/0.development/deploy/deployments/py/*
        - k8s/environments/0.development/deploy/deployments/misc/*
        - k8s/environments/0.development/deploy/scalability/*
        - k8s/environments/0.development/deploy/services/jvm/*
        - k8s/environments/0.development/deploy/services/py/*
        - k8s/environments/0.development/deploy/services/misc/*

    portForward:
      - resourceType: Service
        resourceName: ingress-nginx-controller
        namespace: default
        port: 80
        localPort: 80
      - resourceType: Service
        resourceName: debug-mongo-express-service
        namespace: default
        port: 8081
        localPort: 81
      - resourceType: Service
        resourceName: grafana-svc
        namespace: default
        port: 3000
        localPort: 83

      # Debug port forwarding for java services
      - resourceType: Service
        resourceName: workspace-core-service
        namespace: default
        port: 5005
        localPort: 5051
      - resourceType: Service
        resourceName: workspace-database-service
        namespace: default
        port: 5005
        localPort: 5052
      - resourceType: Service
        resourceName: workspace-notifications-service
        namespace: default
        port: 5005
        localPort: 5053
      - resourceType: Service
        resourceName: workspace-rest-service
        namespace: default
        port: 5005
        localPort: 5054

    build:
      local:
        push: false
      artifacts:


        # python services
        - image: admin-panel-image
          context: build/admin_panel
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app/

        - image: descriptor-service-image
          context: build/descriptor-service
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app/

        - image: keycloak-interface-image
          context: build/keycloak_interface
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app
              - src: '*.json'
                dest: /app/

        - image: recommendations-service-image
          context: build/recomendations-service
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app/

        - image: trends-service-image
          context: build/trends-service
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app/

        - image: workspace-backup-image
          context: build/workspace_backup
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app
              - src: '*.json'
                dest: /app/

        # java services

        - image: notification-service-image
          context: build/notification-service
          docker:
            dockerfile: src/main/docker/Dockerfile.jvm
          sync:
            manual:
              - src: 'target/quarkus-app/lib/'
                dest: /deployments/lib/
              - src: 'target/quarkus-app/*.jar'
                dest: /deployments/
              - src: 'target/quarkus-app/app/'
                dest: /deployments/app/
              - src: 'target/quarkus-app/quarkus/'
                dest: /deployments/quarkus/

        - image: workspace-service-image
          context: build/workspace-service
          docker:
            dockerfile: src/main/docker/Dockerfile.jvm
          sync:
            manual:
              - src: 'target/quarkus-app/lib/'
                dest: /deployments/lib/
              - src: 'target/quarkus-app/*.jar'
                dest: /deployments/
              - src: 'target/quarkus-app/app/'
                dest: /deployments/app/
              - src: 'target/quarkus-app/quarkus/'
                dest: /deployments/quarkus/

        - image: database-service-image
          context: build/workspace-db-service
          docker:
            dockerfile: src/main/docker/Dockerfile.jvm
          sync:
            manual:
              - src: 'target/quarkus-app/lib/'
                dest: /deployments/lib/
              - src: 'target/quarkus-app/*.jar'
                dest: /deployments/
              - src: 'target/quarkus-app/app/'
                dest: /deployments/app/
              - src: 'target/quarkus-app/quarkus/'
                dest: /deployments/quarkus/

        - image: workspace-rest-image
          context: build/workspace-rest-service
          docker:
            dockerfile: src/main/docker/Dockerfile.jvm
          sync:
            manual:
              - src: 'target/quarkus-app/lib/'
                dest: /deployments/lib/
              - src: 'target/quarkus-app/*.jar'
                dest: /deployments/
              - src: 'target/quarkus-app/app/'
                dest: /deployments/app/
              - src: 'target/quarkus-app/quarkus/'
                dest: /deployments/quarkus/

  # Environment for developing and testing the python microservices (abstract away from java)
  - name: py-dev
    # skaffold dev --profile py-dev
    manifests:
      rawYaml:
        - k8s/environments/0.development/deploy/configurations/*
        - k8s/environments/0.development/deploy/infrastructure/*
        - k8s/environments/0.development/deploy/telemetry/*
        - k8s/environments/0.development/deploy/deployments/jvm-multi/*
        - k8s/environments/0.development/deploy/deployments/py/*
        - k8s/environments/0.development/deploy/deployments/misc/*
        - k8s/environments/0.development/deploy/scalability/*
        - k8s/environments/0.development/deploy/services/jvm/*
        - k8s/environments/0.development/deploy/services/py/*
        - k8s/environments/0.development/deploy/services/misc/*

    portForward:
      - resourceType: Service
        resourceName: ingress-nginx-controller
        namespace: default
        port: 80
        localPort: 80
      - resourceType: Service
        resourceName: debug-mongo-express-service
        namespace: default
        port: 8081
        localPort: 81
      - resourceType: Service
        resourceName: grafana-svc
        namespace: default
        port: 3000
        localPort: 83

    build:
      local:
        push: false
      artifacts:
        # python services
        - image: admin-panel-image
          context: build/admin_panel
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app/

        - image: descriptor-service-image
          context: build/descriptor-service
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app/

        - image: keycloak-interface-image
          context: build/keycloak_interface
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app
              - src: '*.json'
                dest: /app/

        - image: recommendations-service-image
          context: build/recomendations-service
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app/

        - image: trends-service-image
          context: build/trends-service
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app/
        - image: workspace-backup-image
          context: build/workspace_backup
          docker:
            dockerfile: Dockerfile
          sync:
            manual:
              - src: '*.py'
                dest: /app
              - src: '*.json'
                dest: /app/
        # java services

        - image: notification-service-image-multi
          context: build/notification-service #docker build context
          docker:
            dockerfile: src/main/docker/Dockerfile.multistage-jvm

        - image: workspace-service-image-multi
          context: build/workspace-service
          docker:
            dockerfile: src/main/docker/Dockerfile.multistage-jvm

        - image: database-service-image-multi
          context: build/workspace-db-service
          docker:
            dockerfile: src/main/docker/Dockerfile.multistage-jvm

        - image: workspace-rest-image-multi
          context: build/workspace-rest-service
          docker:
            dockerfile: src/main/docker/Dockerfile.multistage-jvm

  # Environment for locally testing the java microservices running natively
  - name: jvm-native
    # skaffold dev --profile native-test

    manifests:
      rawYaml:
        - k8s/environments/0.development/deploy/deployments/jvm-native/*
        - k8s/environments/0.development/deploy/deployments/misc/*
        - k8s/environments/0.development/deploy/scalability/*
        - k8s/environments/0.development/deploy/services/jvm/*
        - k8s/environments/0.development/deploy/services/misc/*
        - k8s/environments/0.development/deploy/tripmonkey-ingress-conf.yaml

    portForward:
      - resourceType: Service
        resourceName: ingress-nginx-controller
        namespace: default
        port: 80
        localPort: 80
      - resourceType: Service
        resourceName: debug-mongo-express-service
        namespace: default
        port: 8081
        localPort: 81
      - resourceType: Service
        resourceName: grafana-svc
        namespace: default
        port: 3000
        localPort: 83

    build:
      local:
        push: false
      artifacts:

        # java services

        - image: notification-service-image-native
          context: build/notification-service #docker build context
          docker:
            dockerfile: src/main/docker/Dockerfile.multistage-native

        - image: workspace-service-image-native
          context: build/workspace-service
          docker:
            dockerfile: src/main/docker/Dockerfile.multistage-native

        - image: database-service-image-native
          context: build/workspace-db-service
          docker:
            dockerfile: src/main/docker/Dockerfile.multistage-native

        - image: workspace-rest-image-native
          context: build/workspace-rest-service
          docker:
            dockerfile: src/main/docker/Dockerfile.multistage-native

  - name: test

  - name: prod

# Actual GKE deploy

build:
  local:
    push: true
    useBuildkit: true
  artifacts:
    - image: gcr.io/cn25-g15-tripmonkey/admin-panel-image
      context: build/admin_panel
      docker:
        dockerfile: Dockerfile


    - image: gcr.io/cn25-g15-tripmonkey/descriptor-service-image
      context: build/descriptor-service
      docker:
        dockerfile: Dockerfile


    - image: gcr.io/cn25-g15-tripmonkey/keycloak-interface-image
      context: build/keycloak_interface
      docker:
        dockerfile: Dockerfile

    - image: gcr.io/cn25-g15-tripmonkey/recommendations-service-image
      context: build/recomendations-service
      docker:
        dockerfile: Dockerfile

    - image: gcr.io/cn25-g15-tripmonkey/trends-service-image
      context: build/trends-service
      docker:
        dockerfile: Dockerfile

    - image: gcr.io/cn25-g15-tripmonkey/workspace-backup-image
      context: build/workspace_backup
      docker:
        dockerfile: Dockerfile

    # java services

    - image: gcr.io/cn25-g15-tripmonkey/notification-service-image-multi
      context: build/notification-service #docker build context
      docker:
        dockerfile: src/main/docker/Dockerfile.multistage-jvm

    - image: gcr.io/cn25-g15-tripmonkey/workspace-service-image-multi
      context: build/workspace-service
      docker:
        dockerfile: src/main/docker/Dockerfile.multistage-jvm

    - image: gcr.io/cn25-g15-tripmonkey/database-service-image-multi
      context: build/workspace-db-service
      docker:
        dockerfile: src/main/docker/Dockerfile.multistage-jvm

    - image: gcr.io/cn25-g15-tripmonkey/workspace-rest-image-multi
      context: build/workspace-rest-service
      docker:
        dockerfile: src/main/docker/Dockerfile.multistage-jvm

deploy:
  kubectl:
    hooks:
      before:
        - host:
            command: [ "kubectl","apply","-f","k8s/misc/kafka/" ]
        - host:
            command: ["kubectl","apply","-f","build/mongodb-kubernetes-operator/config/crd/bases/mongodbcommunity.mongodb.com_mongodbcommunity.yaml"]
        - host:
            command: ["kubectl","apply","-f","build/mongodb-kubernetes-operator/deploy/clusterwide/"]
        - host:
            command: ["kubectl","apply","-f","build/mongodb-kubernetes-operator/config/rbac/"]
        - host:
            command: ["kubectl","apply","-f","build/mongodb-kubernetes-operator/config/manager/manager.yaml"]

manifests:

  rawYaml:
    # config and secrets - NOTE for posterity: skaffold doesnt support multiple resources in a single manifest
    - k8s/environments/0.development/deploy/configurations/*
    - k8s/environments/0.development/deploy/rbac/kafka/*
    - k8s/environments/0.development/deploy/rbac/secrets/*

    # infra dependencies
    - k8s/environments/0.development/deploy/infrastructure/infra-kafka.yaml
    - k8s/environments/0.development/deploy/telemetry/*
    - k8s/environments/0.development/deploy/infrastructure/*

    # app
    - k8s/environments/0.development/deploy/infrastructure/tripmonkey-ingress-conf.yaml
    - k8s/environments/0.development/deploy/deployments/jvm-multi/*
    - k8s/environments/0.development/deploy/deployments/py/*
    - k8s/environments/0.development/deploy/scalability/*
    - k8s/environments/0.development/deploy/services/jvm/*
    - k8s/environments/0.development/deploy/services/py/*
    - k8s/environments/0.development/deploy/services/misc/*

portForward:
  - resourceType: Service
    resourceName: gce-internal
    namespace: default
    port: 80
    localPort: 80
  - resourceType: Service
    resourceName: grafana-svc
    namespace: default
    port: 3000
    localPort: 83



